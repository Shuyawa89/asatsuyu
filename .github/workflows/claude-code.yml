name: CI/CD Pipeline

on:
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]
  push:
    branches: [main]

jobs:
  test-and-build:
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Swift
        uses: swift-actions/setup-swift@v2
        with:
          swift-version: '6.0'
          
      - name: Cache Swift dependencies
        uses: actions/cache@v4
        with:
          path: .build
          key: ${{ runner.os }}-swift-${{ hashFiles('Package.swift') }}
          
      - name: Build project
        run: |
          echo "Building Asatsuyu..."
          swift build -c release
          
      - name: Run unit tests
        run: |
          echo "Running unit tests..."
          swift test --enable-code-coverage
          
      - name: Generate test coverage report
        run: |
          echo "Generating coverage report..."
          xcrun llvm-cov export -format="lcov" .build/debug/AsatsuyuPackageTests.xctest/Contents/MacOS/AsatsuyuPackageTests -instr-profile .build/debug/codecov/default.profdata > coverage.lcov || true
          
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.lcov
          fail_ci_if_error: false
          
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run security scan
        run: |
          echo "Scanning for sensitive data..."
          # APIキーや秘密情報の検出
          if grep -r "ANTHROPIC_API_KEY\|sk-" --include="*.swift" --include="*.md" . ; then
            echo "⚠️ Warning: Potential API key found in code"
            exit 1
          fi
          echo "✅ No sensitive data detected"
          
  code-quality:
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Swift lint and format check
        run: |
          echo "Checking Swift code formatting..."
          # Swift format check (when swiftformat is available)
          if command -v swiftformat &> /dev/null; then
            swiftformat --lint .
          else
            echo "swiftformat not available, skipping format check"
          fi
          
      - name: Check for TODOs and FIXMEs
        run: |
          echo "Scanning for TODO/FIXME comments..."
          if grep -r "TODO\|FIXME" --include="*.swift" . ; then
            echo "⚠️ Found TODO/FIXME comments - consider addressing before merge"
          else
            echo "✅ No pending TODOs found"
          fi